package com.self.blog.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.self.blog.security.CustomUserDetailsService;
import com.self.blog.security.JwtAuthenticationEntryPoint;
import com.self.blog.security.JwtAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig  {
      
	@Autowired
	private CustomUserDetailsService customUserDetailsService;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	@Autowired
	private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
	
	@Autowired
	private JwtAuthenticationFilter jwtAuthenticationFilter;
	
	@Bean
	  public SecurityFilterChain securityFilterChain(HttpSecurity http)throws Exception
	  {
		 http.
		 csrf()
		 .disable()
		 .authorizeHttpRequests()
		 .antMatchers("/api/v1/auth/login").permitAll()
		 .anyRequest()
		 .authenticated()
		 .and()
		 .exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint)
		 .and()
		 .sessionManagement()
		 .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		 
		 http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class); 
		 
		 
		return http.build();	 
	  }
	  @Autowired
	  public  void configureGlobal(AuthenticationManagerBuilder auth)throws Exception
	  {
		  auth.userDetailsService(customUserDetailsService).passwordEncoder(passwordEncoder);  
		 }

	  @Bean
	    public AuthenticationManager authenticationManager(AuthenticationConfiguration builder) throws Exception {
	        return builder.getAuthenticationManager();
	    }
	  
//	  @Bean
//	  public AuthenticationManager authenticationManagerBean() throws Exception {
//		return super.authenticationManagerBean()	;	  
//	  }
	  
}
