package com.self.blog.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.self.blog.payloads.ApiResponse;
import com.self.blog.payloads.PostDTO;
import com.self.blog.payloads.PostRespone;
import com.self.blog.repository.PostRepo;
import com.self.blog.services.PostService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api")
public class PostController 
{
	private static final int ResponseEntity = 0;
	@Autowired
	private PostService postService;
	
	
	
     //   create
	@PostMapping("/user/{user_id}/category/{cat_id}/posts")
	public ResponseEntity<PostDTO>createPost(
			@RequestBody PostDTO post_dto,
			@PathVariable Integer user_id,
			@PathVariable Integer cat_id)
	{ 
	  PostDTO postDto= postService.createPost(post_dto, cat_id,user_id);
	   return new ResponseEntity<>(postDto,HttpStatus.CREATED);
	}
	
	//getByUser
	@GetMapping("/user/{user_id}/posts")
	public ResponseEntity<List<PostDTO>> getPostsByUser(@PathVariable Integer user_id)
	{
//		User user= userRepo.findById(user_id).orElseThrow(()->new ResourceNotFoundException("user","Id", user_id));
		 return    new ResponseEntity<>(postService.getPostsByUsers(user_id),HttpStatus.OK);        
		
	}
	
	
	//getByCatefory 
	
	@GetMapping("/category/{cat_id}/posts")
	public ResponseEntity<List<PostDTO>> getPostByCategory(@PathVariable Integer cat_id)
	{
		return    new ResponseEntity<>(postService.getPostsByCategorty(cat_id),HttpStatus.OK); 
     }
	
	// get all posts 
	 
	@GetMapping("/post")
	public ResponseEntity<PostRespone> getAllPosts(
			  @RequestParam(required = false,defaultValue = "10",value = "pageNumber")int pageNumber,
			  @RequestParam(required = false,defaultValue = "1",value = "pageSize")int pageSize,
			  @RequestParam(required = false,defaultValue = "post_id",value="sortBy")String sortBy		   
			)
	     {	
	             
		
		
		 return  new ResponseEntity<>( postService.getallPosts(pageNumber,pageSize,sortBy),HttpStatus.OK) ;	
		 }
	// gets post by id 
	
	@GetMapping("/post/{post_id}")
	public ResponseEntity<PostDTO> getPOstById(@PathVariable Integer post_id)
	{
	  	PostDTO postDTO= postService.getPost(post_id);
	  	return new ResponseEntity<>(postDTO,HttpStatus.OK); 
	}
	
	//update post
	@PutMapping("post/{post_id}")
	public ResponseEntity<PostDTO> updatePost(@Valid @RequestBody PostDTO postDTO,@PathVariable Integer post_id)
	{	
	 PostDTO postDTO2=postService.udatePost(postDTO, post_id);	
	 return new ResponseEntity<>(postDTO2,HttpStatus.OK);
	 }
	@DeleteMapping("/post/{post_id}")
	public ResponseEntity<ApiResponse> deletePost(@PathVariable Integer post_id) {
		     
		ResponseEntity<ApiResponse> postDTO=postService.deletePost(post_id);	
		return postDTO;	 }
	
	
	@GetMapping("/post/search/{keyword}")
	public ResponseEntity<List<PostDTO>> searchByKeyword(@PathVariable Stirng keyword)
	{
		     return new ResponseEntity<>( postService.searchPost(keyword),HttpStatusCode.OK);
		  }
}
