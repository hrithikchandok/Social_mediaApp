package com.self.blog.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.fasterxml.jackson.databind.ser.std.StdKeySerializers.EnumKeySerializer;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter{
 
	@Autowired	 
	private UserDetailsService userDetailsService;
	@Autowired 
	 private JwtHelper jwtHelper;
	
	

	 
	 @Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException 
	 {
//		  1.getToken
		 
		 
		 String requestToken=request.getHeader("Authorization");
		 
		 System.out.println(requestToken);
		 
		 String userName=null;
		 String token=null;
		 
		 // bearer 261386321899
		 
		 if(request!=null && requestToken.startsWith("Bearer"))	 
		 {
			 token=requestToken.substring(7);
			   try {
				   userName=jwtHelper.getUsernameFromToken(token);
				
			} catch (ExpiredJwtException e) {
				System.out.println("Jwt token got Expired");
				// TODO: handle exception
			}
			   catch (MalformedJwtException e) {
				System.out.println("Invalid Jwt");
			}
			   catch (IllegalArgumentException e) {
				// TODO: handle exception
				   System.out.println("unable to get jwt token");
			}
		 }
		 else 
		{
			
			 System.out.println("Jwt doesnt start with Bearer"); 
		}
		 
		 //once we get the token , now validate
		 
		 if(userName!=null && SecurityContextHolder.getContext().getAuthentication()==null) {		 
			   
			UserDetails userDetails= userDetailsService.loadUserByUsername(userName);			 
			 jwtHelper.validateToken(token, userDetails);
		 }
		 else {
			 
		}
		 		 
		 
		
	}
	

}
